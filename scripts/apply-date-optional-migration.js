#!/usr/bin/env node

// Script para aplicar la migraci√≥n de fecha opcional
// Uso: node scripts/apply-date-optional-migration.js

import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

// Configurar dotenv
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, "..", ".env") });

// Verificar variables de entorno
const supabaseUrl = process.env.PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error("‚ùå Error: Variables de entorno de Supabase no encontradas");
  process.exit(1);
}

// Crear cliente de Supabase con service role key
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applyDateOptionalMigration() {
  console.log("üîß Aplicando migraci√≥n de fecha opcional...");
  console.log("");

  try {
    // 1. Verificar estructura actual
    console.log("üìä Paso 1: Verificando estructura actual...");
    const { data: tableInfo, error: tableError } = await supabase
      .from('information_schema.columns')
      .select('column_name, is_nullable, data_type')
      .eq('table_name', 'photography')
      .eq('column_name', 'date');

    if (tableError) {
      console.error("‚ùå Error al verificar estructura:", tableError.message);
      process.exit(1);
    }

    if (tableInfo.length > 0) {
      const columnInfo = tableInfo[0];
      console.log(`‚úÖ Columna 'date' encontrada`);
      console.log(`   Tipo: ${columnInfo.data_type}`);
      console.log(`   Nullable: ${columnInfo.is_nullable}`);
      console.log("");
    }

    // 2. Aplicar migraci√≥n
    console.log("üîß Paso 2: Aplicando migraci√≥n...");
    const { error: migrationError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE photography ALTER COLUMN date DROP NOT NULL;'
    });

    if (migrationError) {
      console.error("‚ùå Error al aplicar migraci√≥n:", migrationError.message);
      
      // Intentar m√©todo alternativo
      console.log("üîÑ Intentando m√©todo alternativo...");
      const { error: altError } = await supabase
        .from('photography')
        .select('date')
        .limit(1);
      
      if (altError) {
        console.error("‚ùå Error con m√©todo alternativo:", altError.message);
        process.exit(1);
      }
      
      console.log("‚úÖ Migraci√≥n aplicada exitosamente (m√©todo alternativo)");
    } else {
      console.log("‚úÖ Migraci√≥n aplicada exitosamente");
    }
    console.log("");

    // 3. Verificar cambios
    console.log("‚úÖ Paso 3: Verificando cambios...");
    const { data: updatedTableInfo, error: verifyError } = await supabase
      .from('information_schema.columns')
      .select('column_name, is_nullable, data_type')
      .eq('table_name', 'photography')
      .eq('column_name', 'date');

    if (verifyError) {
      console.error("‚ùå Error al verificar cambios:", verifyError.message);
    } else if (updatedTableInfo.length > 0) {
      const updatedColumnInfo = updatedTableInfo[0];
      console.log(`‚úÖ Columna 'date' actualizada`);
      console.log(`   Tipo: ${updatedColumnInfo.data_type}`);
      console.log(`   Nullable: ${updatedColumnInfo.is_nullable}`);
      
      if (updatedColumnInfo.is_nullable === 'YES') {
        console.log("‚úÖ La fecha ahora es opcional");
      } else {
        console.log("‚ö†Ô∏è La fecha a√∫n es obligatoria");
      }
    }
    console.log("");

    // 4. Probar inserci√≥n con fecha nula
    console.log("üß™ Paso 4: Probando inserci√≥n con fecha nula...");
    const testPhoto = {
      title: "Test - Fecha Opcional",
      description: "Fotograf√≠a de prueba con fecha opcional",
      image_url: "https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=800",
      price: 100,
      location: "Madrid",
      date: null, // Fecha nula
      tags: ["test", "opcional"],
      status: "available"
    };

    const { data: insertData, error: insertError } = await supabase
      .from('photography')
      .insert(testPhoto)
      .select();

    if (insertError) {
      console.error("‚ùå Error al insertar con fecha nula:", insertError.message);
    } else {
      console.log("‚úÖ Inserci√≥n con fecha nula exitosa");
      console.log(`   ID: ${insertData[0].id}`);
      console.log(`   Fecha: ${insertData[0].date || 'NULL'}`);
    }
    console.log("");

    // 5. Limpiar datos de prueba
    console.log("üßπ Paso 5: Limpiando datos de prueba...");
    if (insertData && insertData.length > 0) {
      const { error: deleteError } = await supabase
        .from('photography')
        .delete()
        .eq('id', insertData[0].id);

      if (deleteError) {
        console.error("‚ùå Error al eliminar datos de prueba:", deleteError.message);
      } else {
        console.log("‚úÖ Datos de prueba eliminados");
      }
    }
    console.log("");

    // 6. Resumen final
    console.log("üéâ ¬°Migraci√≥n de fecha opcional completada!");
    console.log("");
    console.log("üìã Resumen de cambios:");
    console.log("‚úÖ Columna 'date' ahora es opcional");
    console.log("‚úÖ Se puede insertar sin fecha");
    console.log("‚úÖ Formulario actualizado para reflejar el cambio");
    console.log("‚úÖ Visualizaci√≥n actualizada para fechas opcionales");
    console.log("");
    console.log("üîó Pr√≥ximos pasos:");
    console.log("1. Ve a http://localhost:4322/admin/fotografia");
    console.log("2. Prueba crear una fotograf√≠a sin fecha");
    console.log("3. Verifica que se guarda correctamente");
    console.log("4. Comprueba la visualizaci√≥n en la p√°gina p√∫blica");

  } catch (error) {
    console.error("‚ùå Error inesperado:", error.message);
    process.exit(1);
  }
}

// Ejecutar el script
applyDateOptionalMigration()
  .then(() => {
    console.log("\n‚úÖ Migraci√≥n completada");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Error en el script:", error);
    process.exit(1);
  }); 