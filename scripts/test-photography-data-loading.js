#!/usr/bin/env node

// Script para probar la carga de datos de fotograf√≠a desde la base de datos
// Uso: node scripts/test-photography-data-loading.js

import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

// Configurar dotenv
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, "..", ".env") });

// Verificar variables de entorno
const supabaseUrl = process.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error("‚ùå Error: Variables de entorno de Supabase no encontradas");
  process.exit(1);
}

// Crear cliente de Supabase
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testPhotographyDataLoading() {
  console.log(
    "üß™ Probando carga de datos de fotograf√≠a desde la base de datos..."
  );
  console.log("");

  try {
    // 1. Probar carga de todas las fotograf√≠as
    console.log("üì∏ Paso 1: Cargando todas las fotograf√≠as...");
    const { data: allPhotos, error: allError } = await supabase
      .from("photography")
      .select("*")
      .order("created_at", { ascending: false });

    if (allError) {
      console.error(
        "‚ùå Error al cargar todas las fotograf√≠as:",
        allError.message
      );
      process.exit(1);
    }

    console.log(`‚úÖ Se cargaron ${allPhotos.length} fotograf√≠as en total`);
    console.log("");

    // 2. Probar carga de fotograf√≠as disponibles (p√∫blicas)
    console.log("üåê Paso 2: Cargando fotograf√≠as p√∫blicas (disponibles)...");
    const { data: publicPhotos, error: publicError } = await supabase
      .from("photography")
      .select("*")
      .eq("status", "available")
      .order("created_at", { ascending: false });

    if (publicError) {
      console.error(
        "‚ùå Error al cargar fotograf√≠as p√∫blicas:",
        publicError.message
      );
      process.exit(1);
    }

    console.log(`‚úÖ Se cargaron ${publicPhotos.length} fotograf√≠as p√∫blicas`);
    console.log("");

    // 3. Verificar estructura de datos
    console.log("üìä Paso 3: Verificando estructura de datos...");
    if (publicPhotos.length > 0) {
      const samplePhoto = publicPhotos[0];
      console.log("üìã Estructura de una fotograf√≠a:");
      console.log(`   ID: ${samplePhoto.id}`);
      console.log(`   T√≠tulo: ${samplePhoto.title || "Sin t√≠tulo"}`);
      console.log(
        `   Descripci√≥n: ${samplePhoto.description || "Sin descripci√≥n"}`
      );
      console.log(`   URL de imagen: ${samplePhoto.image_url || "Sin imagen"}`);
      console.log(`   Precio: ${samplePhoto.price || "Sin precio"}`);
      console.log(`   Ubicaci√≥n: ${samplePhoto.location || "Sin ubicaci√≥n"}`);
      console.log(`   Fecha: ${samplePhoto.date || "Sin fecha"}`);
      console.log(`   Estado: ${samplePhoto.status}`);
      console.log(
        `   Etiquetas: ${
          (samplePhoto.tags || []).join(", ") || "Sin etiquetas"
        }`
      );
      console.log(`   Creada: ${samplePhoto.created_at}`);
      console.log("");
    }

    // 4. Verificar etiquetas √∫nicas
    console.log("üè∑Ô∏è Paso 4: Verificando etiquetas √∫nicas...");
    const allTags = [
      ...new Set(publicPhotos.flatMap((photo) => photo.tags || [])),
    ];
    console.log(`‚úÖ Se encontraron ${allTags.length} etiquetas √∫nicas:`);
    allTags.forEach((tag, index) => {
      console.log(`   ${index + 1}. ${tag}`);
    });
    console.log("");

    // 5. Verificar im√°genes disponibles
    console.log("üñºÔ∏è Paso 5: Verificando im√°genes disponibles...");
    const photosWithImages = publicPhotos.filter((photo) => photo.image_url);
    const photosWithoutImages = publicPhotos.filter(
      (photo) => !photo.image_url
    );

    console.log(`‚úÖ Fotograf√≠as con im√°genes: ${photosWithImages.length}`);
    console.log(`‚ö†Ô∏è Fotograf√≠as sin im√°genes: ${photosWithoutImages.length}`);

    if (photosWithImages.length > 0) {
      console.log("üìã URLs de im√°genes disponibles:");
      photosWithImages.slice(0, 3).forEach((photo, index) => {
        console.log(`   ${index + 1}. ${photo.title}: ${photo.image_url}`);
      });
    }
    console.log("");

    // 6. Verificar fechas opcionales
    console.log("üìÖ Paso 6: Verificando fechas opcionales...");
    const photosWithDate = publicPhotos.filter((photo) => photo.date);
    const photosWithoutDate = publicPhotos.filter((photo) => !photo.date);

    console.log(`‚úÖ Fotograf√≠as con fecha: ${photosWithDate.length}`);
    console.log(`‚úÖ Fotograf√≠as sin fecha: ${photosWithoutDate.length}`);
    console.log("");

    // 7. Simular consulta de p√°gina p√∫blica
    console.log("üåê Paso 7: Simulando consulta de p√°gina p√∫blica...");
    const pagePublicData = {
      photographyData: publicPhotos,
      allTags: allTags,
    };

    console.log("üìã Datos para p√°gina p√∫blica:");
    console.log(`   - Fotograf√≠as: ${pagePublicData.photographyData.length}`);
    console.log(`   - Etiquetas √∫nicas: ${pagePublicData.allTags.length}`);
    console.log(
      `   - Con im√°genes: ${
        pagePublicData.photographyData.filter((p) => p.image_url).length
      }`
    );
    console.log(
      `   - Con fecha: ${
        pagePublicData.photographyData.filter((p) => p.date).length
      }`
    );
    console.log("");

    // 8. Verificar URLs de im√°genes
    console.log("üîó Paso 8: Verificando URLs de im√°genes...");
    const validUrls = [];
    const invalidUrls = [];

    for (const photo of photosWithImages.slice(0, 3)) {
      try {
        const response = await fetch(photo.image_url, { method: "HEAD" });
        if (response.ok) {
          validUrls.push(photo.image_url);
          console.log(`‚úÖ URL v√°lida: ${photo.title}`);
        } else {
          invalidUrls.push(photo.image_url);
          console.log(`‚ùå URL inv√°lida: ${photo.title} (${response.status})`);
        }
      } catch (error) {
        invalidUrls.push(photo.image_url);
        console.log(
          `‚ùå Error al verificar URL: ${photo.title} (${error.message})`
        );
      }
    }

    console.log(`‚úÖ URLs v√°lidas: ${validUrls.length}`);
    console.log(`‚ùå URLs inv√°lidas: ${invalidUrls.length}`);
    console.log("");

    // 9. Resumen final
    console.log("üéâ ¬°Prueba de carga de datos completada!");
    console.log("");
    console.log("üìã Resumen de funcionalidades:");
    console.log("‚úÖ Conexi√≥n con Supabase funcionando");
    console.log("‚úÖ Carga de fotograf√≠as p√∫blicas exitosa");
    console.log("‚úÖ Estructura de datos verificada");
    console.log("‚úÖ Etiquetas √∫nicas extra√≠das");
    console.log("‚úÖ Im√°genes disponibles identificadas");
    console.log("‚úÖ Fechas opcionales funcionando");
    console.log("‚úÖ URLs de im√°genes validadas");
    console.log("");
    console.log("üîó Pr√≥ximos pasos:");
    console.log("1. Ve a http://localhost:4322/fotografia");
    console.log("2. Verifica que las im√°genes se cargan correctamente");
    console.log("3. Prueba los filtros por etiquetas");
    console.log("4. Comprueba la visualizaci√≥n de fechas opcionales");
    console.log("");
    console.log("üí° Datos disponibles para la p√°gina:");
    console.log(`   - ${publicPhotos.length} fotograf√≠as p√∫blicas`);
    console.log(`   - ${allTags.length} etiquetas √∫nicas`);
    console.log(`   - ${photosWithImages.length} con im√°genes`);
    console.log(`   - ${photosWithDate.length} con fecha`);
    console.log(`   - ${photosWithoutDate.length} sin fecha`);
  } catch (error) {
    console.error("‚ùå Error inesperado:", error.message);
    process.exit(1);
  }
}

// Ejecutar el script
testPhotographyDataLoading()
  .then(() => {
    console.log("\n‚úÖ Prueba completada");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Error en el script:", error);
    process.exit(1);
  });
