#!/usr/bin/env node

// Script para probar las funcionalidades CRUD de fotograf√≠as
// Uso: node scripts/test-photography-crud.js

import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

// Configurar dotenv
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, "..", ".env") });

// Verificar variables de entorno
const supabaseUrl = process.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.PUBLIC_SUPABASE_ANON_KEY;
const adminEmail = process.env.ADMIN_EMAIL;
const adminPassword = process.env.ADMIN_PASSWORD;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error("‚ùå Error: Variables de entorno de Supabase no encontradas");
  process.exit(1);
}

if (!adminEmail || !adminPassword) {
  console.error("‚ùå Error: Variables de entorno de admin no encontradas");
  process.exit(1);
}

// Crear cliente de Supabase
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testPhotographyCRUD() {
  console.log("üß™ Probando funcionalidades CRUD de fotograf√≠as...");
  console.log(`üìß Email: ${adminEmail}`);
  console.log("");

  try {
    // 1. Autenticaci√≥n
    console.log("üîê Paso 1: Autenticaci√≥n...");
    const { data, error } = await supabase.auth.signInWithPassword({
      email: adminEmail,
      password: adminPassword,
    });

    if (error) {
      console.error("‚ùå Error de autenticaci√≥n:", error.message);
      process.exit(1);
    }

    console.log("‚úÖ Autenticaci√≥n exitosa");
    console.log("");

    // 2. Obtener fotograf√≠as existentes
    console.log("üì∏ Paso 2: Obteniendo fotograf√≠as existentes...");
    const { data: existingPhotos, error: fetchError } = await supabase
      .from("photography")
      .select("*")
      .order("created_at", { ascending: false });

    if (fetchError) {
      console.error("‚ùå Error al obtener fotograf√≠as:", fetchError.message);
      process.exit(1);
    }

    console.log(
      `‚úÖ Se encontraron ${existingPhotos.length} fotograf√≠as existentes`
    );
    console.log("");

    // 3. Crear nueva fotograf√≠a
    console.log("‚ûï Paso 3: Creando nueva fotograf√≠a...");
    const newPhoto = {
      title: "Fotograf√≠a de Prueba",
      description:
        "Esta es una fotograf√≠a de prueba para verificar las funcionalidades CRUD",
      image_url: "https://ejemplo.com/imagen-prueba.jpg",
      price: 150.0,
      location: "Madrid, Espa√±a",
      date: "2024-01-15",
      tags: ["prueba", "test", "demo"],
      status: "available",
    };

    const { data: createdPhoto, error: createError } = await supabase
      .from("photography")
      .insert([newPhoto])
      .select()
      .single();

    if (createError) {
      console.error("‚ùå Error al crear fotograf√≠a:", createError.message);
      process.exit(1);
    }

    console.log("‚úÖ Fotograf√≠a creada exitosamente");
    console.log(`   ID: ${createdPhoto.id}`);
    console.log(`   T√≠tulo: ${createdPhoto.title}`);
    console.log("");

    // 4. Obtener fotograf√≠a por ID
    console.log("üîç Paso 4: Obteniendo fotograf√≠a por ID...");
    const { data: fetchedPhoto, error: getError } = await supabase
      .from("photography")
      .select("*")
      .eq("id", createdPhoto.id)
      .single();

    if (getError) {
      console.error("‚ùå Error al obtener fotograf√≠a:", getError.message);
      process.exit(1);
    }

    console.log("‚úÖ Fotograf√≠a obtenida exitosamente");
    console.log(`   T√≠tulo: ${fetchedPhoto.title}`);
    console.log(`   Precio: $${fetchedPhoto.price}`);
    console.log("");

    // 5. Actualizar fotograf√≠a
    console.log("‚úèÔ∏è Paso 5: Actualizando fotograf√≠a...");
    const updateData = {
      title: "Fotograf√≠a de Prueba Actualizada",
      description:
        "Esta fotograf√≠a ha sido actualizada para probar la funcionalidad de edici√≥n",
      price: 200.0,
      status: "sold",
    };

    const { data: updatedPhoto, error: updateError } = await supabase
      .from("photography")
      .update(updateData)
      .eq("id", createdPhoto.id)
      .select()
      .single();

    if (updateError) {
      console.error("‚ùå Error al actualizar fotograf√≠a:", updateError.message);
      process.exit(1);
    }

    console.log("‚úÖ Fotograf√≠a actualizada exitosamente");
    console.log(`   Nuevo t√≠tulo: ${updatedPhoto.title}`);
    console.log(`   Nuevo precio: $${updatedPhoto.price}`);
    console.log(`   Nuevo estado: ${updatedPhoto.status}`);
    console.log("");

    // 6. Buscar fotograf√≠as
    console.log("üîé Paso 6: Probando b√∫squeda de fotograf√≠as...");
    const { data: searchResults, error: searchError } = await supabase
      .from("photography")
      .select("*")
      .or(`title.ilike.%prueba%,description.ilike.%prueba%`)
      .order("created_at", { ascending: false });

    if (searchError) {
      console.error("‚ùå Error al buscar fotograf√≠as:", searchError.message);
    } else {
      console.log(
        `‚úÖ B√∫squeda exitosa: ${searchResults.length} resultados encontrados`
      );
    }
    console.log("");

    // 7. Filtrar por estado
    console.log("üìä Paso 7: Probando filtro por estado...");
    const { data: soldPhotos, error: filterError } = await supabase
      .from("photography")
      .select("*")
      .eq("status", "sold")
      .order("created_at", { ascending: false });

    if (filterError) {
      console.error("‚ùå Error al filtrar por estado:", filterError.message);
    } else {
      console.log(
        `‚úÖ Filtro por estado exitoso: ${soldPhotos.length} fotograf√≠as vendidas`
      );
    }
    console.log("");

    // 8. Eliminar fotograf√≠a de prueba
    console.log("üóëÔ∏è Paso 8: Eliminando fotograf√≠a de prueba...");
    const { error: deleteError } = await supabase
      .from("photography")
      .delete()
      .eq("id", createdPhoto.id);

    if (deleteError) {
      console.error("‚ùå Error al eliminar fotograf√≠a:", deleteError.message);
      process.exit(1);
    }

    console.log("‚úÖ Fotograf√≠a eliminada exitosamente");
    console.log("");

    // 9. Verificar eliminaci√≥n
    console.log("‚úÖ Paso 9: Verificando eliminaci√≥n...");
    const { data: deletedPhoto, error: verifyError } = await supabase
      .from("photography")
      .select("*")
      .eq("id", createdPhoto.id)
      .single();

    if (verifyError && verifyError.code === "PGRST116") {
      console.log(
        "‚úÖ Verificaci√≥n exitosa: La fotograf√≠a fue eliminada correctamente"
      );
    } else {
      console.log("‚ö†Ô∏è La fotograf√≠a a√∫n existe despu√©s de la eliminaci√≥n");
    }
    console.log("");

    // 10. Resumen final
    console.log("üéâ ¬°Prueba CRUD completada exitosamente!");
    console.log("");
    console.log("üìã Resumen de operaciones:");
    console.log("‚úÖ CREATE: Fotograf√≠a creada correctamente");
    console.log("‚úÖ READ: Fotograf√≠a obtenida por ID");
    console.log("‚úÖ UPDATE: Fotograf√≠a actualizada correctamente");
    console.log("‚úÖ DELETE: Fotograf√≠a eliminada correctamente");
    console.log("‚úÖ SEARCH: B√∫squeda de fotograf√≠as funcionando");
    console.log("‚úÖ FILTER: Filtro por estado funcionando");
    console.log("");
    console.log("üîó Pr√≥ximos pasos:");
    console.log("1. Ve a http://localhost:4321/admin/fotografia");
    console.log("2. Prueba las funcionalidades CRUD desde la interfaz web");
    console.log("3. Verifica que los datos se sincronizan correctamente");
  } catch (error) {
    console.error("‚ùå Error inesperado:", error.message);
    process.exit(1);
  }
}

// Ejecutar el script
testPhotographyCRUD()
  .then(() => {
    console.log("\n‚úÖ Prueba completada");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Error en el script:", error);
    process.exit(1);
  });
